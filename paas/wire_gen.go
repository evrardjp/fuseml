// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package paas

import (
	"github.com/fuseml/fuseml/cli/kubernetes"
	config2 "github.com/fuseml/fuseml/cli/kubernetes/config"
	"github.com/fuseml/fuseml/cli/paas/config"
	"github.com/fuseml/fuseml/cli/paas/ui"
	"github.com/spf13/pflag"
)

// Injectors from wire.go:

func NewFusemlClient(flags *pflag.FlagSet, configOverrides func(*config.Config)) (*FusemlClient, func(), error) {
	configConfig, err := config.Load(flags)
	if err != nil {
		return nil, nil, err
	}
	restConfig, err := config2.KubeConfig()
	if err != nil {
		return nil, nil, err
	}
	cluster, err := kubernetes.NewClusterFromClient(restConfig)
	if err != nil {
		return nil, nil, err
	}
	uiUI := ui.NewUI()
	logger := config2.NewClientLogger()
	fusemlClient := &FusemlClient{
		kubeClient: cluster,
		ui:         uiUI,
		config:     configConfig,
		Log:        logger,
	}
	return fusemlClient, func() {
	}, nil
}

func NewInstallClient(flags *pflag.FlagSet, configOverrides func(*config.Config)) (*InstallClient, func(), error) {
	restConfig, err := config2.KubeConfig()
	if err != nil {
		return nil, nil, err
	}
	cluster, err := kubernetes.NewClusterFromClient(restConfig)
	if err != nil {
		return nil, nil, err
	}
	uiUI := ui.NewUI()
	configConfig, err := config.Load(flags)
	if err != nil {
		return nil, nil, err
	}
	logger := config2.NewInstallClientLogger()
	installClient := &InstallClient{
		kubeClient: cluster,
		ui:         uiUI,
		config:     configConfig,
		Log:        logger,
	}
	return installClient, func() {
	}, nil
}
